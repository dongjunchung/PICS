{
    "collab_server" : "",
    "contents" : "rm( list=ls() )\nlibrary(glmnet);library(survival);library(parallel)\nlibrary(foreach);library(doMC);library(pheatmap);\nlibrary(SGL);library(plsRcox)\nlibrary(Hmisc);library(ggrepel);library(ggplot2);library(gridExtra)\n\n##preprosess-----------------------------------\nsource(\"~/Dropbox/CancerGenomics/preprocess.R\")\nsource(\"C:/Users/sunze/Desktop/Dropbox/CancerGenomics/preprocess.R\")\n#load(\"~/splscox and sgl 01082017.RData\")\n\ncores <- detectCores() \nregisterDoMC(cores)\n\n##check missingness\nmiss <- NULL\nmiss=apply(TCGA.dat, 2, function(x){length(which(is.na(x)))/nrow(TCGA.dat)})\nwhich(miss!=0)\nTCGA.dat=na.omit(TCGA.dat)\nset.seed(12345)\n#drawn=sample( 1:nrow(TCGA.dat), 243, replace = F )\n#train=TCGA.dat[drawn,]\n#test=TCGA.dat[-drawn,]\ntrain=TCGA.dat\n\nmrna=train[,2:11742]##1st column is id\nnames(mrna)=names(genomic)[-1]\ntime=train[,11743]\nstatus=ifelse(train[,11744]==\"DECEASED\",1,0)\nn=length(time)\n##------------------------------------------------\n###superwised prefiltering--------------------------\n##------------------------------------------------------\nlength(names(mrna)) ##11741 genes total\nlength( unique(names(mrna)) ) ##4601 unique genes\n\n\nmrna<-as.data.frame(ex)\npvals <-foreach(i=1:ncol(mrna), .combine='c') %do% {\n\tsummary(coxph( Surv(time,status)~mrna[,i] ))$coef[5] \n}\n\nsig=ifelse( pvals<0.2, 1, 0 )\neda=data.frame(pnames,names(mrna),sig)\nmrna.new=mrna[,which(sig==1)]\nnames(mrna.new)=names(mrna)[which(sig==1)]\n##unique genes after prefitering\nlength(unique(names(mrna.new))) \npnames.new=pnames[which(sig==1)]\npathways=unique(pnames.new)\n\n##------------------------------------------------------\n###splsCOX----------------------------------------------\netas=seq(0.1,0.9,0.1)\nscore=spls.genes=test.score=spls.beta=list()\nk.opt=eta.opt=NULL\n\nset.seed(12345)\ncvfolds <- split(sample(length(time)), rep(1:10, length=n))\n\nfor(j in 1:length(pathways)){\n  index=xx=NULL\n  index=which(pnames.new%in%pathways[j]==T)\n\n  xx=as.matrix( mrna.new[,index] )\n  colnames(xx)=colnames(mrna.new)[index]\n  kmax=min( 10, ncol(xx) )\n  \n  if(kmax>1){\t\t\n    aucs=matrix(0,nrow=length(etas),ncol=kmax)\n    rownames(aucs)=etas\n    colnames(aucs)=c(1:kmax)\n    aucs <- foreach(i=1:length(etas),.combine='rbind') %dopar% {\n      cv.coxsplsDR( list(x=xx,time=time,status=status), \n\tgivefold=cvfolds, nt=kmax,nfold=10,eta=etas[i],\n\tplot.it=F,se=T,sclaleY=F )$cv.error10[-1]\t\n    }\n   auccol <- apply(aucs, 2, max)\n   aucrow <- apply(aucs, 1, max)\n   k.opt[j] <- min(c(1:kmax)[auccol==max(aucs)])\n   eta.opt[j] <- max(etas[aucrow==max(aucs)])\n\n   fit=coxsplsDR(xx,time,status,ncomp=k.opt[j],eta=eta.opt[j],\n\tscaleY=F,allres=T)\n   spls.beta[[j]]=fit$splsDR_mod$betahat\n   ##print(fit)\n   score[[j]]=as.matrix(fit$tt_splsDR)\n   ##mixOmics package\n   spls.genes[[j]]=rownames(fit$splsDR_modplsr$loadings$X)\n##tests=predict(fit$splsDR_modplsr,newdata=scale(xx[,c(3,10)]),type=\"scores\")\n    }else{\n     score[[j]]=xx\n     spls.genes[[j]]=colnames(xx)\n     spls.beta[[j]]=NA\n     k.opt[j]=1\n     eta.opt[j]=NA\n   }\t\t\n}\nnames(spls.genes)=pathways\nlength(unique(unlist(spls.genes)))\n\n##sparse group lasso \nxx=foreach(i=1:length(pathways), .combine='cbind')%do%{score[[i]]}\nXX=list( x=xx, time=time, status=status )\n##because there are a large number of small pathways(k is small, 185 pathways), \n##we choose alpah=0.05 as the sgl paper suggested\nset.seed(67890)\nsglcv=cvSGL(data=XX, index=rep(1:length(pathways),k.opt), type=\"cox\", \nnfold=10, alpha=0.05)\n\n#set.seed(12345)\n#sglcv4=cvSGL(data=XX, index=rep(1:length(pathways),k.opt), type=\"cox\", \n#nfold=10, alpha=0.7)\n\nset.seed(67890)\nsglcv2=cvSGL(data=XX, index=rep(1:length(pathways),k.opt), type=\"cox\", \nnfold=10, alpha=0.5)\n\nset.seed(67890)\nsglcv3=cvSGL(data=XX, index=rep(1:length(pathways),k.opt), type=\"cox\", \nnfold=10, alpha=0.95)\n\nset.seed(67890)\nsglcv5=cvSGL(data=XX, index=rep(1:length(pathways),k.opt), type=\"cox\", \nnfold=10, alpha=1)\n\ncbind(sglcv$lam,sglcv2$lam,sglcv3$lam,sglcv5$lam)\ncbind(sglcv$lldiff,sglcv2$lldiff,sglcv3$lldiff,sglcv5$lldiff)\n\nh=which.min(sglcv5$lldiff)\nsgl.beta=sglcv5$fit$beta[,h]\nsgl_results=data.frame(rep(pathways,k.opt),sgl.beta)[sgl.beta!=0,]\nsgl.path=unique(factor(sgl_results[,1]))\n\nsgl.genes=lapply(sgl.path,function(x){\nindex=which(pathways==x)\nspls.genes[[index]]\n})\nunique(unlist(sgl.genes))\n\n#save.image(\"internal validate 01072017.RData\")\n#save.image(\"splscox and sgl 01092017 cvSGL.RData\")\n\n##the orginal psrp paper treatment all genes as equal while constructing\n##psrp, we estimate the effect of a pathway based on weighted contribution\n##from genes (scores)\n\n##examine the 100 signature genes from verhaak et al.\nverhaak=read.csv(\"/home/benben/Desktop/Link to CancerGenomics/Data/signature genes.csv\")\n\np.org <- read.delim( \"/home/benben/Desktop/Link to CancerGenomics/Data/c2.cp.kegg.v5.0.symbols.gmt\",\n  sep=\"!\", header=FALSE, stringsAsFactors=FALSE )\n\nplist <- apply( p.org, 1, function(x) {\n  ss <- strsplit( x, \"\\t\" )[[1]]\n  return(ss[-c(1:2)])\n} )\n\nnames(plist) <- apply( p.org, 1, function(x) {\n  ss <- strsplit( x, \"\\t\" )[[1]]\n  return(ss[1])\n} )\n\nverhaak[,1]%in%unlist(plist)\nverhaak[,1]%in%unlist(sgl.genes)\n#data.frame(verhaak[,1]%in%eda[,2],verhaak[,1]%in%unlist(sgl.genes))\n\n\n\n\n",
    "created" : 1489994825898.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3141539495",
    "id" : "9D6B2C21",
    "lastKnownWriteTime" : 1484249173,
    "last_content_update" : 1484249173,
    "path" : "E:/Dr.Chung/package/splscox with sgl internval validate 01092017.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}