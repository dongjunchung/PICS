mat.t = matrix(nrow = n, ncol = ncomp)
mat.u = matrix(nrow = n, ncol = ncomp)
mat.a = matrix(nrow = p, ncol = ncomp)
mat.b = matrix(nrow = q, ncol = ncomp)
mat.c = matrix(nrow = p, ncol = ncomp)
mat.d = matrix(nrow = q, ncol = ncomp)
mat.e = matrix(nrow = q, ncol = ncomp)
n.ones = rep(1, n)
p.ones = rep(1, p)
q.ones = rep(1, q)
na.X = FALSE
na.Y = FALSE
is.na.X = is.na(X)
is.na.Y = is.na(Y)
if (any(is.na.X))
na.X = TRUE
if (any(is.na.Y))
na.Y = TRUE
for (h in 1:ncomp) {
u = Y.temp[, 1]
if (any(is.na(u)))
u[is.na(u)] = 0
a.old = 0
b.old = 0
iter = 1
if (na.X) {
X.aux = X.temp
X.aux[is.na.X] = 0
}
if (na.Y) {
Y.aux = Y.temp
Y.aux[is.na.Y] = 0
}
repeat {
if (na.X) {
a = crossprod(X.aux, u)
U = drop(u) %o% p.ones
U[is.na.X] = 0
u.norm = crossprod(U)
a = a/diag(u.norm)
a = a/drop(sqrt(crossprod(a)))
t = X.aux %*% a
A = drop(a) %o% n.ones
A[t(is.na.X)] = 0
a.norm = crossprod(A)
t = t/diag(a.norm)
}
else {
a = crossprod(X.temp, u)/drop(crossprod(u))
a = a/drop(sqrt(crossprod(a)))
t = X.temp %*% a/drop(crossprod(a))
}
if (na.Y) {
b = crossprod(Y.aux, t)
T = drop(t) %o% q.ones
T[is.na.Y] = 0
t.norm = crossprod(T)
b = b/diag(t.norm)
u = Y.aux %*% b
B = drop(b) %o% n.ones
B[t(is.na.Y)] = 0
b.norm = crossprod(B)
u = u/diag(b.norm)
}
else {
b = crossprod(Y.temp, t)/drop(crossprod(t))
u = Y.temp %*% b/drop(crossprod(b))
}
if (crossprod(a - a.old) < tol)
break
if (iter == max.iter) {
warning(paste("Maximum number of iterations reached for dimension",
h), call. = FALSE)
break
}
a.old = a
b.old = b
iter = iter + 1
}
if (na.X) {
X.aux = X.temp
X.aux[is.na.X] = 0
c = crossprod(X.aux, t)
T = drop(t) %o% p.ones
T[is.na.X] = 0
t.norm = crossprod(T)
c = c/diag(t.norm)
}
else {
c = crossprod(X.temp, t)/drop(crossprod(t))
}
X.temp = X.temp - t %*% t(c)
if (mode == "canonical") {
if (na.Y) {
Y.aux = Y.temp
Y.aux[is.na.Y] = 0
e = crossprod(Y.aux, u)
U = drop(u) %o% q.ones
U[is.na.Y] = 0
u.norm = crossprod(U)
e = e/diag(u.norm)
}
else {
e = crossprod(Y.temp, u)/drop(crossprod(u))
}
Y.temp = Y.temp - u %*% t(e)
}
if (mode == "classic")
Y.temp = Y.temp - t %*% t(b)
if (mode == "regression") {
if (na.Y) {
Y.aux = Y.temp
Y.aux[is.na.Y] = 0
d = crossprod(Y.aux, t)
T = drop(t) %o% q.ones
T[is.na.Y] = 0
t.norm = crossprod(T)
d = d/diag(t.norm)
}
else {
d = crossprod(Y.temp, t)/drop(crossprod(t))
}
Y.temp = Y.temp - t %*% t(d)
}
if (mode == "invariant")
Y.temp = Y
mat.t[, h] = t
mat.u[, h] = u
mat.a[, h] = a
mat.b[, h] = b
mat.c[, h] = c
if (mode == "regression")
mat.d[, h] = d
if (mode == "canonical")
mat.e[, h] = e
}
rownames(mat.a) = rownames(mat.c) = X.names
rownames(mat.b) = Y.names
rownames(mat.t) = rownames(mat.u) = ind.names
comp = paste("comp", 1:ncomp)
colnames(mat.t) = colnames(mat.u) = comp
colnames(mat.a) = colnames(mat.b) = colnames(mat.c) = comp
cl = match.call()
cl[[1]] = as.name("pls")
result = list(call = cl, X = X, Y = Y, ncomp = ncomp, mode = mode,
mat.c = mat.c, mat.d = mat.d, mat.e = mat.e, variates = list(X=mat.t,
Y = mat.u), loadings = list(X = mat.a, Y = mat.b),
names = list(X = X.names, Y = Y.names, indiv = ind.names))
if (length(nzv$Position > 0))
result$nzv = nzv
class(result) = "pls"
return(invisible(result))
}
cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE )
predict.pls.cox=
function (object, newdata, scale.X = TRUE, scale.Y = TRUE, ...)
{
if (missing(newdata))
stop("No new data available.")
X = object$X
Y = object$Y
q = ncol(Y)
p = ncol(X)
if (length(dim(newdata)) == 2) {
if (ncol(newdata) != p)
stop("'newdata' must be a numeric matrix with ncol = ",
p, " or a vector of length = ", p, ".")
}
if (length(dim(newdata)) == 0) {
if (length(newdata) != p)
stop("'newdata' must be a numeric matrix with ncol = ",
p, " or a vector of length = ", p, ".")
dim(newdata) = c(1, p)
}
ncomp = object$ncomp
a = object$loadings$X
b = object$loadings$Y
c = object$mat.c
if (scale.X) {
means.X = attr(X, "scaled:center")
}
if (scale.Y) {
means.Y = attr(Y, "scaled:center")
}
if (scale.X) {
sigma.X = attr(X, "scaled:scale")
}
if (scale.Y) {
sigma.Y = attr(Y, "scaled:scale")
}
newdata = as.matrix(newdata)
ones = matrix(rep(1, nrow(newdata)), ncol = 1)
B.hat = array(0, dim = c(p, q, ncomp))
Y.hat = array(0, dim = c(nrow(newdata), q, ncomp))
t.pred = array(0, dim = c(nrow(newdata), ncomp))
for (h in 1:ncomp) {
W = a[, 1:h] %*% solve(t(c[, 1:h]) %*% a[, 1:h])
B = W %*% drop(t(b[, 1:h]))
if (scale.Y) {
B = scale(B, center = FALSE, scale = 1/sigma.Y)
}
if (scale.X) {
B = as.matrix(scale(t(B), center = FALSE, scale = sigma.X))
}
if (!scale.X) {
B = as.matrix(t(B))
}
if (scale.X & scale.Y) {
intercept = -scale(B, center = FALSE, scale = 1/means.X)
intercept = matrix(apply(intercept, 1, sum) + means.Y,
nrow = 1)
Y.hat[, , h] = newdata %*% t(B) + ones %*% intercept
}
if (scale.X & !scale.Y) {
intercept = -scale(B, center = FALSE, scale = 1/means.X)
intercept = matrix(apply(intercept, 1, sum), nrow = 1)
Y.hat[, , h] = newdata %*% t(B) + ones %*% intercept
}
if (!scale.X & scale.Y) {
intercept = -B
intercept = matrix(apply(intercept, 1, sum) + means.Y,
nrow = 1)
Y.hat[, , h] = newdata %*% t(B) + ones %*% intercept
}
if (!scale.X & !scale.Y) {
Y.hat[, , h] = newdata %*% t(B)
}
if (!scale.X) {
t.pred[, h] = newdata %*% W[, h]
}
if (scale.X) {
t.pred[, h] = scale(newdata, center = means.X, scale = sigma.X) %*%
W[, h]
}
B.hat[, , h] = B
}
rownames(t.pred) = rownames(newdata)
colnames(t.pred) = paste("dim", c(1:ncomp), sep = " ")
rownames(Y.hat) = rownames(newdata)
colnames(Y.hat) = colnames(Y)
return(invisible(list(predict = Y.hat, variates = t.pred, w=W,
B.hat = B.hat)))
}
cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE )
library(PICS)
library(PICS)
library(PICS)
data(TCGA)
train.list=prefilter( data=TCGA$geneexpr, time=TCGA$t, status=TCGA$d, plist=TCGA$pathList )
gene.results=selectGene( object=train.list, fold=5, K=c(3,5), etas=c(0.1,0.9),seed=123)
library(PICS)
data(TCGA)
train.list=prefilter( data=TCGA$geneexpr, time=TCGA$t, status=TCGA$d, plist=TCGA$pathList )
gene.results=selectGene( object=train.list, fold=5, K=c(3,5), etas=c(0.1,0.9),seed=123)
cv.coxsplsDR2
cph
gene.results=selectGene( train.list, fold=5, K=5, etas=c(0.1,0.5,0.9) )
object=train.list
fold=5
K=5
etas=seq(0.1,0.9,0.1)
seed=123
time=object@inputdata$time
status=object@inputdata$status
data=object@xlist
pathways=object@inputdata$pathway
set.seed(seed)
n=length(time)
cvfolds <- split(sample(n), rep(1:fold, length=n))
dimx=unlist( lapply(data,function(x){ncol(as.matrix(x))}) )
k.opt=eta.opt=NULL
score=genes=beta=spls.beta=w=list()
j=1
xx=as.matrix( data[[j]],nrow=n,ncol=dimx[j] )
kmax=min( K, ncol(xx) )
if(kmax>1){
aucs <- foreach(i=1:length(etas),.combine='rbind') %do% {
suppressWarnings(cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE ))
#plot.it=F, sclaleY=F ))
cbind( cvi$cv.error10[-1],cvi$cv.se10[-1]	)
}
aucs <- foreach(i=1:length(etas),.combine='rbind') %do% {
suppressWarnings(cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE ))
#plot.it=F, sclaleY=F ))
cbind( cvi$cv.error10[-1],cvi$cv.se10[-1]	)
}
library(foreach)
aucs <- foreach(i=1:length(etas),.combine='rbind') %do% {
suppressWarnings(cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE ))
#plot.it=F, sclaleY=F ))
cbind( cvi$cv.error10[-1],cvi$cv.se10[-1]	)
}
i=1
cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE )
cvi
i
length(etas)
i=2
cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE )
i=3
cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE )
i=4
cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE )
i=5
cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE )
i=6
cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE )
i=7
cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE )
i=8
cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE )
i=0
i=0
i=9
cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE )
etas
etas[i]
aucs <- foreach(i=1:length(etas),.combine='rbind') %do% {
suppressWarnings(cvi=cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE ))
#plot.it=F, sclaleY=F ))
cbind( cvi$cv.error10[-1],cvi$cv.se10[-1]	)
}
cvi
str(cvi)
?suppressWarnings
aucs <- foreach(i=1:length(etas),.combine='rbind') %do% {
suppressWarnings(cvi <- cv.coxsplsDR2(
data=list(x=xx,time=time,status=status),
nfold=fold, nt=kmax, eta=etas[i],
se=TRUE, givefold=cvfolds,
scaleX=TRUE, scaleY=FALSE ))
#plot.it=F, sclaleY=F ))
cbind( cvi$cv.error10[-1],cvi$cv.se10[-1]	)
}
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
library(PICS)
data(TCGA)
prefilter.results=prefilter( data=TCGA$geneexpr, time=TCGA$t, status=TCGA$d, plist=TCGA$pathList )
gene.results=selectGene( object=prefilter.results, fold=5, K=5, etas=c(0.1,0.9),seed=123)
path.results=selectPath( object=gene.results, seed=123)
path.resu;ts
path.results
library(PICS)
data(TCGA)
prefilter.results=prefilter( data=TCGA$geneexpr, time=TCGA$t, status=TCGA$d, plist=TCGA$pathList )
gene.results=selectGene( object=prefilter.results, fold=5, K=5, etas=c(0.1,0.9),seed=123)
path.results=selectPath( object=gene.results, seed=123)
library(PICS)
data(TCGA)
prefilter.results=prefilter( data=TCGA$geneexpr, time=TCGA$t, status=TCGA$d, plist=TCGA$pathList )
gene.results=selectGene( object=prefilter.results, fold=5, K=5, etas=c(0.1,0.9),seed=123)
path.results=selectPath( object=gene.results, seed=123)
path.results
plot(path.results)
plot(path.results,type="HR")
x=path.results
path.results<-x@coef
betas<-path.results[,2]
paths<-path.results[,1]
index<-coefs<-list()
mat<-path.results[betas!=0,]
lab2=paths
#lab1=gsub( "KEGG_", "", paths )
#lab2=gsub( "_PATHWAY", "", lab1 )
for(i in 1:length(paths)){
j<-which( mat[,1]==paths[i] )
coefs[[i]]<-mat[j,2]
}
names(coefs)<-lab2
o<-rev(order(-sapply(coefs,max)))
coefs<-coefs[o]
lab2<-names(coefs)
coefs<-unique(coefs)
lab2<- unique(lab2)
for(i in 1:length(coefs)){
if(length(coefs[[i]])>1){
index[[i]]<-rev(seq( i-0.1*length(coefs[[i]])+0.1, i , 0.1 ))
}
if(length(coefs[[i]])==1){index[[i]]<-i}
}
index.plot<- unlist(index)
coefs.plot<- exp(unlist(coefs))
path.plot<-lab2
data.plot<- as.data.frame(cbind(index.plot,coefs.plot))
(coefs
coefs
betas
mat
coefs
o<-rev(order(-sapply(coefs,function(c){
if ( length(c) > 1 ) {
max(abs(c))
} else {
0
}
})))
coefs<-coefs[o]
coefs
# plot hazard ratios of selected pathways
path.results<-x@coef
betas<-path.results[,2]
paths<-path.results[,1]
index<-coefs<-list()
mat<-path.results[betas!=0,]
lab2=paths
#lab1=gsub( "KEGG_", "", paths )
#lab2=gsub( "_PATHWAY", "", lab1 )
for(i in 1:length(paths)){
j<-which( mat[,1]==paths[i] )
coefs[[i]]<-mat[j,2]
}
names(coefs)<-lab2
o<-rev(order(sapply(coefs,function(c){
if ( length(c) > 1 ) {
max(abs(c))
} else {
0
}
}), decreasing=TRUE))
coefs<-coefs[o]
lab2<-names(coefs)
coefs
coefs<-unique(coefs)
lab2<- unique(lab2)
for(i in 1:length(coefs)){
if(length(coefs[[i]])>1){
index[[i]]<-rev(seq( i-0.1*length(coefs[[i]])+0.1, i , 0.1 ))
}
if(length(coefs[[i]])==1){index[[i]]<-i}
}
coefs
